/* 
 Example using the SparkFun HX711 breakout board with a scale
 By: Nathan Seidle
 SparkFun Electronics
 Date: November 19th, 2014
 License: This code is public domain but you buy me a beer if you use this and we meet someday (Beerware license).

 This example demonstrates basic scale output. See the calibration sketch to get the calibration_factor for your
 specific load cell setup.

 This example code uses bogde's excellent library:"https://github.com/bogde/HX711"
 bogde's library is released under a GNU GENERAL PUBLIC LICENSE

 The HX711 does one thing well: read load cells. The breakout board is compatible with any wheat-stone bridge
 based load cell which should allow a user to measure everything from a few grams to tens of tons.
 Arduino pin 2 -> HX711 CLK
 3 -> DAT
 5V -> VCC
 GND -> GND

 The HX711 board can be powered from 2.7V to 5V so the Arduino 5V power should be fine.

*/

#include "HX711.h"

// this header is needed for Bluetooth Serial -> works ONLY on ESP32
#include "BluetoothSerial.h" 

#define calibration_factor -10050.0 //This value is obtained using the SparkFun_HX711_Calibration sketch

#define LOADCELL_DOUT_PIN  10
#define LOADCELL_SCK_PIN  8

/*
  LiquidCrystal Library - Hello World

 Demonstrates the use a 16x2 LCD display.  The LiquidCrystal
 library works with all LCD displays that are compatible with the
 Hitachi HD44780 driver. There are many of them out there, and you
 can usually tell them by the 16-pin interface.

 This sketch prints "Hello World!" to the LCD
 and shows the time.

  The circuit:
 * LCD RS pin to digital pin 12
 * LCD Enable pin to digital pin 11
 * LCD D4 pin to digital pin 5
 * LCD D5 pin to digital pin 4
 * LCD D6 pin to digital pin 3
 * LCD D7 pin to digital pin 2
 * LCD R/W pin to ground
 * LCD VSS pin to ground
 * LCD VCC pin to 5V
 * 10K resistor:
 * ends to +5V and ground
 * wiper to LCD VO pin (pin 3)

 Library originally added 18 Apr 2008
 by David A. Mellis
 library modified 5 Jul 2009
 by Limor Fried (http://www.ladyada.net)
 example added 9 Jul 2009
 by Tom Igoe
 modified 22 Nov 2010
 by Tom Igoe
 modified 7 Nov 2016
 by Arturo Guadalupi

 This example code is in the public domain.

 https://docs.arduino.cc/learn/electronics/lcd-displays

*/

// include the library code:
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>

//
//#include <SoftwareSerial.h>
//SoftwareSerial BTserial(2, 3); // RX | TX

// initialize the library by associating any needed LCD interface pin
// with the arduino pin number it is connected to
//const int rs = 2, en = 3, d4 = 7, d5 = 6, d6 = 5, d7 = 4;
//LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
LiquidCrystal_I2C lcd(0x27,20,4);  // set the LCD address to 0x27 for a 16 chars and 2 line display

float weight = 0.0;
   float prevWeight = 0.0;
   int counter = 0;
   int sleepCounter = 0;

  float  addedWeights = 0;
  float  numSamplings = 0;
  float avgWeight = 0;

  int incoming;                           // variable to store byte received from phone 



#include <SoftwareSerial.h>
SoftwareSerial BTserial(2, 3); // RX | TX

HX711 scale;

void setup() {
  
  Serial.begin(19200);
   BTserial.begin(9600);  
  
  pinMode(6, OUTPUT);
  
  digitalWrite(6, LOW); // Ensure the buzzer is off

  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
  scale.set_scale(calibration_factor); //This value is obtained by using the SparkFun_HX711_Calibration sketch
  scale.tare(); //Assuming there is no weight on the scale at start up, reset the scale to 0

  Serial.println("Readings:");

    weight = 0.0;
    prevWeight = 0.0;
    counter = 0;
    sleepCounter = 0;

    addedWeights = 0;
    numSamplings = 0;
   avgWeight = 0;
    // set up the LCD's number of columns and rows:
  lcd.init();                      // initialize the lcd 
  lcd.init();
  // Print a message to the LCD.
  lcd.backlight();
   lcd.setCursor(0, 0);

  lcd.print("STARTING UP!");
//  
  lcd.setCursor(0, 1);
  // print the number of seconds since reset:
  lcd.print("UPSCALE BY TOM");
 
   counter = 0;
   lcd.clear();
   lcd.setCursor(0,0);
  lcd.print("0.0 kgs");
  lcd.setCursor(0,1);
  lcd.print("0.0 lbs");
    scale.tare(); //Assuming there is no weight on the scale at start up, reset the scale to 0


}

void loop() {

  
  
  weight = scale.get_units();
  Serial.println(weight);
  Serial.println(sleepCounter);
  
  if(sleepCounter >= 100 && weight > 2){
    lcd.display();
    lcd.backlight();
    sleepCounter = 0;
    
  }
  if(weight < -10 || weight > 500)
  {
    
//    scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
//  scale.set_scale(calibration_factor); //This value is obtained by using the SparkFun_HX711_Calibration sketch
  scale.tare(); //Assuming there is no weight on the scale at start up, reset the scale to 0
       lcd.setCursor(0,0);
      lcd.print("0.0 kgs           ");
      lcd.setCursor(0, 1);
      lcd.print("0.0 lbs           ");
  // Print a message to the LCD.
  delay(1000);
  }
  else if (weight <= 5) {
    sleepCounter++;
    if (sleepCounter >= 100){
    
      lcd.noBacklight();
      lcd.noDisplay();
    }
    else if(sleepCounter >= 50 )
    {

 // scale.tare(); //Assuming there is no weight on the scale at start up, reset the scale to 0
      lcd.setCursor(0,0);
      lcd.print("0.0 kgs           ");
      lcd.setCursor(0, 1);
      lcd.print("0.0 lbs           ");
     // sleepCounter = 0;
    }

  }
  else if (abs(weight - prevWeight) > .7){ //if weight is changing 
    Serial.print("CHANGE");
   sleepCounter = 0; //not sleeping
//  lcd.display();// display on
addedWeights = 0;
numSamplings = 0;

  
    prevWeight = weight;
  
  lcd.setCursor(0,0);
  lcd.print(weight * 0.453592, 1);
  lcd.print(" kgs           ");
  
  lcd.setCursor(0, 1);
  // print the number of seconds since reset:
  lcd.print(weight, 1);
  lcd.print(" lbs          ");
  counter = 0;
  //BTserial.print("0 0");
}
else if (weight > 5) { //if weight is more than 5lbs 
  counter++; // increase count
  addedWeights = addedWeights + weight;
  numSamplings++; 
//  Serial.println(addedWeights);
//  Serial.println(numSamplings);
//  Serial.println(counter);
  if (counter >= 50) { //if stable
    avgWeight = addedWeights/numSamplings;
     digitalWrite(6, HIGH); // buzzer on
     delay(300);
      digitalWrite(6, LOW); // buzzer off
        String output = String(roundToOneDecimal(avgWeight * .453592)) + "      "+ String(roundToOneDecimal(avgWeight));
        BTserial.print(output);
        
  lcd.setCursor(0,0);
  lcd.print(avgWeight * 0.453592, 1);
  lcd.print(" kgs   LOCK");
  lcd.setCursor(0, 1);
  // print the number of seconds since reset:
  lcd.print(avgWeight, 1);
  lcd.print(" lbs   LOCK ");
  
  
    delay(15000);
    lcd.clear();
   
   
    
    prevWeight = 0;
    weight = 0;
    counter = 0;
    sleepCounter = 0;

    
    addedWeights = 0;
    numSamplings = 0;
    avgWeight = 0;
    lcd.setCursor(0,0);
  lcd.print("0.0 kgs");
  lcd.setCursor(0, 1);
  // print the number of seconds since reset:
    lcd.print("0.0 lbs");
     delay(500);
  }}
  }

  float roundToOneDecimal(float number) {
    // Multiply the number by 10, add 0.5, and then cast to int to truncate the decimal part
    int temp = (int)(number * 10 + 0.5);
    // Divide by 10.0 to get the number rounded to one decimal place
    return temp / 10.0;
}
